\import lect11

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' => transport (\lam x => a = x) q p

\func \infixr 5 <* {A : \Type} {a' a'' a : A} (q : a' = a) (p : a' = a'') : a = a'' => transport (\lam x => x = a'') q p

\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a => transport (\lam x => x = a) p idp

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty =>
  transport (\lam n => \case n \with { | 0 => Empty | suc _ => Unit }) p unit

\func zero/=suc {n : Nat} (p : 0 = suc n) : Empty => suc/=0 (sym p)

\func pred (n : Nat) : Nat | 0 => 0 | suc n => n

\func n/=suc-n {n : Nat} (p : n = suc n) : Empty \elim n
  | 0     => suc/=0 (sym p)
  | suc n => n/=suc-n (pmap pred p)

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam x1 x2 gfx1=gfx2 => p x1 x2 (q (f x1) (f x2) gfx1=gfx2)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam x1 x2 fx1=fx2 => p x1 x2 (pmap g fx1=fx2)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func \infixr 5 :3or5 (n : Nat) : Bool =>
  \case mod3 n, mod5 n \with {
    | 0, _ => true
    | _, 0 => true
    | _, _ => false
  }

\func isMultipleOf3Or5 (n : Nat) : \Type => T (n :3or5)

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam _ _ => T-lem

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc =>
  \lam x1 x2 eq => sigmaEq (\lam n => isMultipleOf3Or5 n) x1 x2 eq T-lem

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  ( \lam t => (\lam x y => sym (t.2 y <* t.2 x), t.1), \lam p => (p.2, p.1 p.2) )

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  \let p => p Unit-isProp Unit-isProp (inr unit) (inl unit) \in
    T-absurd (transport (\lam e => \case e \with { | inr _ => T true | _ => T false }) p tt)

-- 5. Докажите, что LessOrEq и LessOrEq' являются предикатами.

\data LessOrEq (n m : Nat) \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func test11 : LessOrEq 0 100 => z<=n

\func test12 : LessOrEq 3 67 => s<=s (s<=s (s<=s z<=n))

\data LessOrEq' (n m : Nat) \elim m
  | suc m => <=-step (LessOrEq' n m)
  |     m => <=-refl (n = m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => toPath n m
  \where \func toPath (n m : Nat) (x y : LessOrEq n m) : x = y
    | 0,     _,     z<=n,    z<=n    => idp
    | suc n, suc m, s<=s l1, s<=s l2 => pmap s<=s (toPath n m l1 l2)

-- Для решения LessOrEq'-isProp понадобится тот факт, что Nat является множеством.
-- Ниже приведено доказательство этого факта, которое можно использовать.
-- Пояснение к этому доказательству будет дано позже.
\func Nat-isSet : isSet Nat => \lam _ _ => Path.inProp

\func LessOrEq'-isProp {n m : Nat} : isProp (LessOrEq' n m) => toPath n m

\func toPath (n m : Nat) (x y : LessOrEq' n m) : x = y
  | n, m,     <=-refl p, <=-refl q => pmap <=-refl (equality-isProp Nat-isSet n m p q)
  | n, suc m, <=-refl p, <=-step l => absurd (notEq p l)
  | n, suc m, <=-step l, <=-refl p => absurd (notEq p l)
  | n, suc m, <=-step p, <=-step l => pmap <=-step (toPath n m p l)
  \where
    \func notEq {n m : Nat} (p : n = suc m) (l : LessOrEq' n m) : Empty => {?}

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

--\func \infix 4 < (n m : Nat) : Bool
--  | _, 0 => false
--  | 0, suc _ => true
--  | suc n, suc m => n < m
--
--\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
--  | refl (x = y)
--  | inc (R x y)
--
--\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => {?}
--
--\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty => {?}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => p x y (q (f x) (f y))
