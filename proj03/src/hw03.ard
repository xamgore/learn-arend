\import lect03


\func \infixr 5 :: {A : \Type} {n : Nat} (x : A) (xs : Vec A n) : Vec A (suc n) => fcons x xs
\func [] => fnil

\func test:: : fcons 1 (fcons 2 fnil) = 1 :: (2 :: []) => idp


\func \infix 2 == (x y : Nat) : Bool
  | suc x, suc y => x == y
  | 0,     0     => true
  | _,     _     => false


\func foldr {A B : \Type} {n : Nat} (f : A -> B -> B) (zero : B) (xs : Vec A n) : B \elim n, xs
  | 0, _              => zero
  | suc n, fcons x xs => f x (foldr f zero xs)

\func testFoldr : foldr (Nat.+) 0 (2 :: 2 :: 1 :: []) = 5 => idp


-- 1. Докажите ассоциативность ++.

\func \infixr 5 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs)  \elim xs
  | nil => idp
  | cons x xs => pmap (cons x) (++-assoc xs ys zs)


-- 2. На прошлой лекции мы определяли функцию T : Bool -> \Type рекурсивно.
--    Определите аналогичную функцию индуктивно.

\data T (b : Bool) \with
  | true  => True

\func absurdT {A : \Type} (e : T false) : A

\func testT : T (true) => True

\func testT2 : T (len (nil : List Nat) < 1) => True

\func testT3 (xs : List Nat) (p : T (len xs < 1)) : Bool \elim xs
  | nil => true
  | _   => false

\func testT3isTrue : (testT3 (nil : List Nat) True) = true => idp


-- 3. Напишите функцию lookup, которая принимает список и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func len {A : \Type} (xs : List A) : Nat
  | nil       => 0
  | cons x xs => suc (len xs)

\func lookup {A : \Type} (xs : List A) (idx : Nat) (p : T (idx < len xs)) : A \elim xs, idx
  | cons x xs, 0     => x
  | cons x xs, suc i => lookup xs i p
  | nil,       0     => absurdT p


-- 4. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate' {A : \Type} (x : A) (n : Nat) : vec A n \elim n
  | 0      => ()
  | suc n' => (x, (replicate' x n'))

\func replicate {A : \Type} (x : A) (n : Nat) : Vec A n \elim n
  | 0      => []
  | suc n' => x :: (replicate x n')


-- 5. Реализуйте аналоги функции map для vec и Vec.

\func map' {A B : \Type} (f : A -> B) {n : Nat} (v : vec A n) : vec B n \elim n
  | 0      => ()
  | suc n' => (f v.1, map' f v.2)

\func map {A B : \Type} (f : A -> B) {n : Nat} (v : Vec A n) : Vec B n \elim n, v
  | 0, _               => []
  | suc n', fcons x xs => f x :: map f xs


-- 6. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith' {A B C : \Type} (f : A -> B -> C) {n : Nat} (xs : vec A n) (ys : vec B n) : vec C n \elim n
  | 0      => ()
  | suc n' => (f xs.1 ys.1, zipWith' f xs.2 ys.2)

\func zipWith {A B C : \Type} (f : A -> B -> C) {n : Nat} (xs : Vec A n) (ys : Vec B n) : Vec C n \elim n, xs, ys
  | 0, _, _                        => []
  | suc n', fcons x xs, fcons y ys => f x y :: zipWith f xs ys


-- 7. Реализуйте Fin как рекурсивную функцию.

-- Когда мы определяем тип рекурсивно, fin (suc n) определяется через fin n. Как fin (suc n) связан с fin n? Btw, для определения можно использовать другой \data.
\data Empty

-- fixme: Вот хотел эту штуку взять, не решался. спасибо за подсказку :)
\data Either (A B : \Type)
  | inl A
  | inr B

-- Но Fin 1 не состоит из 1 элемента, их там Nat + Nat, а в fin (suc n) их Nat + fin n. Может нужно написать 1 + fin n? Зачем тут вообще Nat?
\func fin (n : Nat) : \Type \elim n
  | 0        => Empty
  | suc n    => Either (\Sigma) (fin n)

\func fin0' : fin 3 => inl ()
\func fin1' : fin 3 => inr (inl ())
\func fin2' : fin 3 => inr (inr (inl ()))
--\func fin3' : fin 3 => inr (inr (inr (inl 1)))

\func absurdFin' {A : \Type} (x : fin 0) : A


-- 8. Функции Fin n → A соответствуют спискам элементов A длины n.
--    Функция, преобразующая Vec A n в Fin n → A, была реализована на лекции.
--    Реализуйте обратную функцию.

-- Я пофиксил небольшой баг с паттерн матчингом. Теперь эти функции должно быть рпоще определить.
\func toFin (n i : Nat) (p : T (i < n)) : Fin n \elim n, i
  | suc n, 0     => fzero
  | suc n, suc i => fsuc (toFin n i p)
  | 0,     0     => absurdT p

\func testToFin0 : toFin 3 0 (True) = fzero => idp
\func testToFin1 : toFin 3 1 (True) = fsuc fzero => idp
\func testToFin2 : toFin 3 2 (True) = fsuc (fsuc fzero) => idp
--\func testToFin3 : toFin 3 3 (True) = fsuc (fsuc (fsuc fzero)) => idp

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | suc n => f fzero :: coin (\lam num => f (fsuc num))
  | 0     => []


-- 9. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A m) n

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => diag' z e n n
    \func diag' {A : \Type} (z e : A) (m i : Nat) : Mat A i m \elim i
      | suc i => set-i'th z e i m :: diag' z e m i
      | 0     => []

\func set-i'th {A : \Type} (z e : A) (i n : Nat) : Vec A n \elim n
  | suc n => if (i == n) e z :: set-i'th z e i n
  | 0     => []

\func test-diag : (diag 1 2 3) = exM => idp
  \where \func exM => (2 :: 1 :: 1 :: []) ::
                      (1 :: 2 :: 1 :: []) ::
                      (1 :: 1 :: 2 :: []) :: []

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, m
  | _,     0     => []
  | 0,     m     => replicate [] m
  | suc n, suc m => (map Head M) :: (transpose (map Tail M))

\func testTranspose : (diag 1 2 3) = transpose (transpose (diag 1 2 3)) => idp

\func test-transpose : transpose exM' = exM'' => idp
  \where \func exM'  => (1 :: 2 :: 3 :: []) :: (4 :: 5 :: 6 :: []) :: (7 :: 8 :: 9 :: []) :: []
         \func exM'' => (1 :: 4 :: 7 :: []) :: (2 :: 5 :: 8 :: []) :: (3 :: 6 :: 9 :: []) :: []

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m
  => zipWith (zipWith add) M N

\func test-matAdd : matAdd (Nat.+) 3 3 M M = M+M => idp
  \where \func M   => diag 2 4 3
         \func M+M => diag 4 8 3

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {T : \Type} (z : T) (add mul : T -> T -> T) (n m k : Nat) (A : Mat T n m) (B : Mat T m k) : Mat T n k
  => map (\lam row => map (foldr add z) (matAdd mul k m (replicate row k) (transpose B))) A

\func testMat : matMul 0 (Nat.+) (Nat.*) 1 1 1 ((2 :: []) :: []) ((2 :: []) :: []) = ((4 :: []) :: []) => idp


-- 10. Определите тип CTree A n бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--     Любое такое бинарное дерево будет полным.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0     => cLeaf
  | suc n => cNode A (CTree A n) (CTree A n)

--\func cTreeNotFull : CTree Nat 2 => cNode 1 (cNode 1 cLeaf cLeaf) (cLeaf)
--\func cTreeTooHigh : CTree Nat 2 => cNode 1 (cNode 1 cLeaf cLeaf) (cNode 2 (cNode 1 cLeaf cLeaf) (cNode 1 cLeaf cLeaf))
\func cTreeExample : CTree Nat 2 => cNode 1 (cNode 1 cLeaf cLeaf) (cNode 1 cLeaf cLeaf)


-- 11. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
-- Высота листа равна 0.
-- Можно создавать конструкторы, который сразу для всех значений параметров \data определены.
-- fixme: не очень понятно как, если честно

{-
\data Tree (A : \Type) (n : Nat) : \Type \elim n
  | 0     => leaf
  | suc n => { | cut | node A (Tree A n) (Tree A n) }
-}

-- В смысле не можешь определить конструктор для всех n? Может я чего-то не понимаю, но как бы вот. What's the problem?
\data Tree (A : \Type) (n : Nat) : \Type \elim n
  | suc n => node A (Tree A n) (Tree A n)
  | _     => leaf


---- определите функцию, возвращающую высоту дерева.

\func \infix 4 Fin< {n : Nat} (x y : Fin n) : Bool => (toNat x) < (toNat y)

\func max {n : Nat} (x y : Fin n) : Fin n => if (x Fin< y) y x

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | _,     leaf       => fzero
  | suc n, node _ l r => fsuc (max (height n l) (height n r))
