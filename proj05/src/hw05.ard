\import lect05
\open Nat

\func \infixr 1 >>= => (>==)
\func \infix 2 =<< => (==<)


-- 1. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
  | 0     => idp
  | suc k => pmap (\lam x => x + n) (ldistr n m k) *> (+-assoc (n * m) (n * k) n)

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0     => idp
  | suc n => ((m + k) * suc n               =<< idp
         >>=  (m + k) * n + (m + k)         =<< pmap (\lam t => t + (m + k)) (rdistr n m k)
         >>=  (m * n + k * n) + (m + k)     =<< +-assoc (m * n) (k * n) (m + k)
         >>=  m * n + (k * n + (m + k))     =<< pmap (m * n +) (sym (+-assoc (k * n) m k))
         >>=  m * n + ((k * n + m) + k)     =<< pmap (\lam t => m * n + (t + k)) (+-comm (k * n) m)
         >>=  m * n + ((m + k * n) + k)     =<< pmap (m * n +) (+-assoc m (k * n) k)
         >>=  m * n + (m + (k * n + k))     =<< sym (+-assoc (m * n) m (k * n + k))
         >>=  (m * n + m) + (k * n + k)     =<< idp
         >>=  ((m * suc n) + (k * suc n))   `qed)

-- Q: можно ли в правой части что-нибудь сократить? ну кроме idp
-- A: Я не вижу ничего такого.

-- Q: есть ли левое сечение? (\lam t => t + (m + k)) на (+ (m + k))
-- A: Нет, только правое.
--    + x y -- это просто аппликация + к x и y.
--    + x -- это частичное применение, то есть эквивалентно \lam t => x + t.


-- 2. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

\func ++-nil {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
  | nil       => idp
  | cons x xs => pmap (cons x) (++-nil xs)

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons x xs => pmap (cons x) (++-assoc xs ys zs)


-- Это утверждение будет полезно для доказательства.
-- reverse (x : xs ++ ys) ==> reverse (xs ++ ys) ++ [x] <=> (reverse ys ++ reverse xs) ++ [x]
--   <== reverse (y:ys) ++ (reverse xs ++ [x]) <== reverse (y:ys) ++ reverse (x:xs)
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil       => ++-nil (reverse ys)
  | cons x xs => pmap (\lam t => t ++ cons x nil) (reverse++ xs ys)
                   *> ++-assoc (reverse ys) (reverse xs) (cons x nil)

-- reverse (reverse x : xs) ==> reverse (reverse xs ++ [x]) ==> reverse [x] ++ reverse (reverse xs)
--   => [x] ++ xs => x : xs
\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil       => idp
  | cons x xs => (reverse (reverse (cons x xs))                    =<< reverse++ (reverse xs) (cons x nil)
             >>= (reverse (cons x nil)) ++ (reverse (reverse xs))  =<< pmap (cons x) (reverse-isInvolutive xs)
             >>= (reverse (cons x nil)) ++ xs                      =<< idp
             >>= cons x xs                                         `qed)


-- 3. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n)
  : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
    | 0, vnil           => idp
    | suc n, vcons x xs =>
      \let typesEq e (p : 0 + n = e) =>
                 transport (Vec A) (pmap suc p) (vcons x (xs v++ vnil)) =
        vcons x (transport (Vec A)           p           (xs v++ vnil))
        \in J typesEq idp (+-comm 0 n) *> pmap (vcons x) (vnil-rightId xs)


-- 4. Докажите, что 0 не равно suc x.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty
  => absurd (transport Fin (sym p) fzero)

\data Fin (n : Nat) \with
  | suc n => { fzero | fsuc (Fin n) }

\func absurd {A : \Type} (x : Fin 0) : A


-- 5. Докажите, что fac не равен suc.

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func ==1 (n : Nat) : \Type
  | 1 => \Sigma
  | _ => Empty

\func absurd' {A : \Type} (e : Empty) : A

\func one/=two (p : 1 = 2) : Empty
  => absurd' (transport ==1 p ())

\func fac/=suc (p : fac = suc) : Empty
  => one/=two (pmap (\lam f => f 1) p)

-- TODO:
--  0.   Вот можно определить аксиому (отсутствие док-ва),
--     а можно сказать, что что-то точно ложь (принять фигню, вернуть Empty)
--
--       А можно ли объединить эти два подхода, чтобы для каких-то входных данных
--     результат аксиома, а для остальных -- ложь?
--
--  1. Как определить аксиому, которая принимает (n m : Nat) и возвращает n = m,
--       только если n == m в вычислительном смысле? (рекурсивная функция)
--
--  2. Есть ли способ пруфануть one/=two без дополнительного типа данных или функции как выше?
--       Здесь выглядит несколько наигранно, что мы по сути сами сказали, что ==1 -- аксиома
--       Кажется, было бы прикольно использовать аксиому из пункта 1.
--
--  3. как доказать, что вообще все числа различны? (1 != 2, 1 != 3, 2 != 3, итд)
--     то есть обобщить one/=two


-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (l r : A) -> l = r -> \Type)
    (b : \Pi (x : A) -> B x x idp)
    {a a' : A} (p : a = a') : B a a' p => J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.

\func J' {A : \Type} {a : A} (B : \Pi (r : A) -> a = r -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a') : B a' p
      => Jalt (\lam x y p' => \Pi (C : \Pi (r : A) -> x = r -> \Type) -> C x idp -> C y p')
                (\lam _ _ z => z) {a} {a'} p B b
