\open Nat

-- 1. Коммутативность сложения.

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a)
  => coe (\lam i => B (p @ i)) b right

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p
-- transport B idp b => b
-- p *> idp => p
-- idp <* p => p

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') => path (\lam i => f (p @ i))

\func sym {A : \Type} {a a' : A} (p : a = a') => transport (\lam x => x = a) p idp

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

-- 2. Equational reasoning, коммутивность сложения через него.

\func idp {A : \Type} {a : A} => path (\lam _ => a)

\func \infix 2 qed {A : \Type} (a : A) : a = a => idp

\func \infixr 1 >== {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') => p *> q

\func \infix 2 ==< {A : \Type} (a : A) {a' : A} (p : a = a') => p

\func +-comm' (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm' 0 m)
  | suc n, 0 => pmap suc (+-comm' n 0)
  | suc n, suc m => pmap suc
      (suc n + m
    ==< +-comm' (suc n) m >==
      suc (m + n)
    ==< pmap suc (sym (+-comm' n m)) >==
      suc (n + m)
    ==< +-comm' n (suc m) >==
      suc m + n
    `qed)

-- x `f == f x
-- x `f` y == f x y

-- 3. Ассоциативность ++ для векторов.

\data Vec (A : \Type) (n : Nat) \elim n
  | zero => vnil
  | suc n => vcons A (Vec A n)

\func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m + n) \elim n, xs
  | 0, vnil => ys
  | suc n, vcons x xs => vcons x (xs v++ ys)

\func Nat-elim (B : Nat -> \Type)
    (z : B 0)
    (s : \Pi (k : Nat) -> B k -> B (suc k))
    (n : Nat) : B n \elim n
    | 0 => z
    | suc n => s n (Nat-elim B z s n)

{-
\func K {A : \Type} {a : A} (B : a = a -> \Type)
    (b : B idp)
    (p : a = a) : B p => {?}
-}

\func J {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a') : B a' p => {?}

{-
\func foo (p : a = a') : B p \elim p
  | idp => ...
-}

\func v++-assoc {A : \Type} {n m k : Nat} (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : (xs v++ ys) v++ zs = transport (Vec A) (+-assoc k m n) (xs v++ (ys v++ zs)) \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs => pmap (vcons x) (v++-assoc xs ys zs) *>
        J (\lam e (p : k + m + n = e) =>
                    vcons x (transport (Vec A) p (xs v++ (ys v++ zs))) =
                    transport (Vec A) (pmap suc p) (vcons x (xs v++ (ys v++ zs))))
          idp
          (+-assoc k m n)
  -- vcons x (transport (Vec A) (+-assoc k m n) (xs v++ (ys v++ zs))) =
  -- transport (Vec A) (pmap suc (+-assoc k m n)) (vcons x (xs v++ (ys v++ zs))

-- 4. Доказательства неравенств.

\data Bool | true | false

\data Empty

\data T (b : Bool) \with
  | true => tt

\func TI (b : I)
  | left => \Sigma
  | right => Empty

\data TI' (b : I) \with
  | left => ti

\func absurd (t : T false) : Empty

\func true/=false (p : true = false) : Empty => absurd (transport T p tt)
