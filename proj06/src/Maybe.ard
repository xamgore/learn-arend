\import Id (idp)


\data Maybe (A : \Type) | nothing | just A


-- fmap
\func fmap {A B : \Type} (f : A -> B) (x : Maybe A) : Maybe B \elim x
  | nothing => nothing
  | just x  => just (f x)

\func fmap-id {A : \Type} (mx : Maybe A)
  : fmap (\lam (x : A) => x) mx = mx \elim mx
    | nothing => idp
    | just x  => idp

\func fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : Maybe A)
  : fmap (\lam x => g (f x)) y = fmap g (fmap f y) \elim y
    | nothing => idp
    | just y  => idp


-- unit
\func unit-comp {A B : \Type} (f : A -> B) (x : A)
  : just (f x) = fmap f (just x) => idp


-- join
\func join {A : \Type} (x : Maybe (Maybe A)) : Maybe A \elim x
  | nothing => nothing
  | just x  => x

\func join-id {A : \Type} (x : Maybe A) : join (fmap just x) = x \elim x
  | nothing => idp
  | just x  => idp

\func join-twice {A : \Type} (x : Maybe (Maybe (Maybe A)))
  : join (fmap join x) = join (join x) \elim x
    | nothing => idp
    | just x  => idp

\func join-fmap {A B : \Type} (f : A -> B) (x : Maybe (Maybe A))
  : join (fmap (fmap f) x) = (fmap f) (join x) \elim x
    | nothing => idp
    | just x  => idp
