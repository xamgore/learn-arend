\import Common ($)
\import lect06


\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x $ xs ++ ys


-- fmap
\func fmap {A B : \Type} (f : A -> B) (xs : List A) : List B \elim xs
  | nil       => nil
  | cons x xs => cons (f x) $ fmap f xs

\func fmap-id {A : \Type} (xs : List A)
  : fmap (\lam (x : A) => x) xs = xs \elim xs
    | nil       => idp
    | cons x xs => pmap (cons x) $ fmap-id xs

\func fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (xs : List A)
  : fmap g (fmap f xs) = fmap (\lam x => g (f x)) xs \elim xs
    | nil       => idp
    | cons y ys => pmap (cons $ g $ f y) $ fmap-comp f g ys


-- unit
\func unit {A : \Type} (x : A) : List A => cons x nil

\func unit-comp {A B : \Type} (f : A -> B) (x : A)
  : unit (f x) = fmap f (unit x) => idp


-- join
\func join {A : \Type} (xs : List (List A)) : List A \elim xs
  | nil         => nil
  | cons xs xss => xs ++ join xss

\func join-id {A : \Type} (xs : List A) : join (fmap unit xs) = xs \elim xs
  | nil       => idp
  | cons x xs => pmap (cons x) (join-id xs)

\func join-twice {A : \Type} (xss : List (List (List A)))
  : join (fmap join xss) = join (join xss) \elim xss
    | nil         => idp
    | cons xs xss => {?}

\func join-fmap {A B : \Type} (f : A -> B) (x : List (List A))
  : join (fmap (fmap f) x) = (fmap f) (join x) \elim x
    | nil => idp
    | cons x xs  => {?}
